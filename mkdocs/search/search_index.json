{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Analog Devices, Inc. Transceiver Toolbox For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#analog-devices-inc-transceiver-toolbox","text":"For full documentation visit mkdocs.org .","title":"Analog Devices, Inc. Transceiver Toolbox"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"sysobjects/adi.AD9361.Rx/","text":"adi.AD9361.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.AD9361.Rx System object is a signal source that can receive complex data from the AD9361. rx = adi.AD9361.Rx; rx = adi.AD9361.Rx('uri','192.168.2.1'); AD9361 Datasheet See also adi.FMComms2.Rx, adi.FMComms3.Rx, adi.FMComms5.Rx Documentation for adi.AD9361.Rx doc adi.AD9361.Rx Usage Creation dev = adi.AD9361.Rx dev = adi.AD9361.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second. RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz. GainControlModeChannel0 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC mode GainChannel0 Channel 0 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency. GainControlModeChannel1 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC mode GainChannel1 Channel 1 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency. LoopbackMode Option to set digital loopback mode, specified as 0, 1 or 2. Allows either to digitally loopback TX data into the RX path or vice versa. Value | Mode --------------------------- 0 | Disable 1 | Digital TX -> Digital RX 2 | RF RX -> RF TX EnableQuadratureTracking Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal. EnableRFDCTracking Option to enable RF DC tracking, specified as true or false. When this property is true, an RF DC blocking filter is applied to the input signal. EnableBasebandDCTracking Option to enable baseband DC tracking, specified as true or false. When this property is true, a baseband DC blocking filter is applied to the input signal. RFPortSelect 'A_BALANCED' 'B_BALANCED' 'C_BALANCED' 'A_N' 'A_P' 'B_N' 'B_P' 'C_N' 'C_P' 'TX_MONITOR1' 'TX_MONITOR2' 'TX_MONITOR1_2' SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.AD9361.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.AD9361.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.AD9361.Rx"},{"location":"sysobjects/adi.AD9361.Tx/","text":"adi.AD9361.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.AD9361.Tx System object is a signal sink that can tranmsit complex data from the AD9361. tx = adi.AD9361.Tx; tx = adi.AD9361.Tx('uri','192.168.2.1'); AD9361 Datasheet See also adi.FMComms2.Tx, adi.FMComms3.Tx, adi.FMComms5.Tx Documentation for adi.AD9361.Tx doc adi.AD9361.Tx Usage Creation dev = adi.AD9361.Tx dev = adi.AD9361.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second. RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz. AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB. AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB. RFPortSelect 'A' 'B' SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.AD9361.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.AD9361.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.AD9361.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9361.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9361.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9361.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.AD9361.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.AD9361.Tx"},{"location":"sysobjects/adi.AD9363.Rx/","text":"adi.AD9363.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.AD9363.Rx System object is a signal source that can receive complex data from the AD9364. rx = adi.AD9363.Rx; rx = adi.AD9363.Rx('uri','192.168.2.1'); AD9363 Datasheet See also adi.Pluto.Rx Documentation for adi.AD9363.Rx doc adi.AD9363.Rx Usage Creation dev = adi.AD9363.Rx dev = adi.AD9363.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.AD9363.Rx/CenterFrequency is inherited from superclass ADI.AD9361.RX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.AD9363.Rx/SamplingRate is inherited from superclass ADI.AD9361.RX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.AD9363.Rx/RFBandwidth is inherited from superclass ADI.AD9361.RX GainControlModeChannel0 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.AD9363.Rx/GainControlModeChannel0 is inherited from superclass ADI.AD9361.RX GainChannel0 Channel 0 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.AD9363.Rx/GainChannel0 is inherited from superclass ADI.AD9361.RX GainControlModeChannel1 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.AD9363.Rx/GainControlModeChannel1 is inherited from superclass ADI.AD9361.RX GainChannel1 Channel 1 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.AD9363.Rx/GainChannel1 is inherited from superclass ADI.AD9361.RX LoopbackMode Option to set digital loopback mode, specified as 0, 1 or 2. Allows either to digitally loopback TX data into the RX path or vice versa. Value | Mode --------------------------- 0 | Disable 1 | Digital TX -> Digital RX 2 | RF RX -> RF TX Help for adi.AD9363.Rx/LoopbackMode is inherited from superclass ADI.AD9361.RX EnableQuadratureTracking Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.AD9363.Rx/EnableQuadratureTracking is inherited from superclass ADI.AD9361.RX EnableRFDCTracking Option to enable RF DC tracking, specified as true or false. When this property is true, an RF DC blocking filter is applied to the input signal.Help for adi.AD9363.Rx/EnableRFDCTracking is inherited from superclass ADI.AD9361.RX EnableBasebandDCTracking Option to enable baseband DC tracking, specified as true or false. When this property is true, a baseband DC blocking filter is applied to the input signal.Help for adi.AD9363.Rx/EnableBasebandDCTracking is inherited from superclass ADI.AD9361.RX RFPortSelect 'A_BALANCED' 'B_BALANCED' 'C_BALANCED' 'A_N' 'A_P' 'B_N' 'B_P' 'C_N' 'C_P' 'TX_MONITOR1' 'TX_MONITOR2' 'TX_MONITOR1_2'Help for adi.AD9363.Rx/RFPortSelect is inherited from superclass ADI.AD9361.RX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.AD9363.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.AD9363.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.AD9363.Rx"},{"location":"sysobjects/adi.AD9363.Tx/","text":"adi.AD9363.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.AD9363.Tx System object is a signal sink that can transmit complex data from the AD9364. tx = adi.AD9363.Tx; tx = adi.AD9363.Tx('uri','192.168.2.1'); AD9363 Datasheet See also adi.Pluto.Tx Documentation for adi.AD9363.Tx doc adi.AD9363.Tx Usage Creation dev = adi.AD9363.Tx dev = adi.AD9363.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.AD9363.Tx/CenterFrequency is inherited from superclass ADI.AD9361.TX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.AD9363.Tx/SamplingRate is inherited from superclass ADI.AD9361.TX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.AD9363.Tx/RFBandwidth is inherited from superclass ADI.AD9361.TX AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.AD9363.Tx/AttenuationChannel0 is inherited from superclass ADI.AD9361.TX AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.AD9363.Tx/AttenuationChannel1 is inherited from superclass ADI.AD9361.TX RFPortSelect 'A' 'B'Help for adi.AD9363.Tx/RFPortSelect is inherited from superclass ADI.AD9361.TX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.AD9363.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.AD9363.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.AD9363.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9363.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9363.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9363.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.AD9363.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.AD9363.Tx"},{"location":"sysobjects/adi.AD9364.Rx/","text":"adi.AD9364.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.AD9361.Rx System object is a signal source that can receive complex data from the AD9364. rx = adi.AD9364.Rx; rx = adi.AD9364.Rx('uri','192.168.2.1'); AD9364 Datasheet See also adi.FMComms4.Rx Documentation for adi.AD9364.Rx doc adi.AD9364.Rx Usage Creation dev = adi.AD9364.Rx dev = adi.AD9364.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.AD9364.Rx/CenterFrequency is inherited from superclass ADI.AD9361.RX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.AD9364.Rx/SamplingRate is inherited from superclass ADI.AD9361.RX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.AD9364.Rx/RFBandwidth is inherited from superclass ADI.AD9361.RX GainControlModeChannel0 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.AD9364.Rx/GainControlModeChannel0 is inherited from superclass ADI.AD9361.RX GainChannel0 Channel 0 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.AD9364.Rx/GainChannel0 is inherited from superclass ADI.AD9361.RX GainControlModeChannel1 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.AD9364.Rx/GainControlModeChannel1 is inherited from superclass ADI.AD9361.RX GainChannel1 Channel 1 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.AD9364.Rx/GainChannel1 is inherited from superclass ADI.AD9361.RX LoopbackMode Option to set digital loopback mode, specified as 0, 1 or 2. Allows either to digitally loopback TX data into the RX path or vice versa. Value | Mode --------------------------- 0 | Disable 1 | Digital TX -> Digital RX 2 | RF RX -> RF TX Help for adi.AD9364.Rx/LoopbackMode is inherited from superclass ADI.AD9361.RX EnableQuadratureTracking Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.AD9364.Rx/EnableQuadratureTracking is inherited from superclass ADI.AD9361.RX EnableRFDCTracking Option to enable RF DC tracking, specified as true or false. When this property is true, an RF DC blocking filter is applied to the input signal.Help for adi.AD9364.Rx/EnableRFDCTracking is inherited from superclass ADI.AD9361.RX EnableBasebandDCTracking Option to enable baseband DC tracking, specified as true or false. When this property is true, a baseband DC blocking filter is applied to the input signal.Help for adi.AD9364.Rx/EnableBasebandDCTracking is inherited from superclass ADI.AD9361.RX RFPortSelect 'A_BALANCED' 'B_BALANCED' 'C_BALANCED' 'A_N' 'A_P' 'B_N' 'B_P' 'C_N' 'C_P' 'TX_MONITOR1' 'TX_MONITOR2' 'TX_MONITOR1_2'Help for adi.AD9364.Rx/RFPortSelect is inherited from superclass ADI.AD9361.RX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.AD9364.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.AD9364.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.AD9364.Rx"},{"location":"sysobjects/adi.AD9364.Tx/","text":"adi.AD9364.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.AD9361.Rx System object is a signal sink that can transmit complex data from the AD9364. tx = adi.AD9364.Tx; tx = adi.AD9364.Tx('uri','192.168.2.1'); AD9364 Datasheet See also adi.FMComms4.Tx Documentation for adi.AD9364.Tx doc adi.AD9364.Tx Usage Creation dev = adi.AD9364.Tx dev = adi.AD9364.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.AD9364.Tx/CenterFrequency is inherited from superclass ADI.AD9361.TX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.AD9364.Tx/SamplingRate is inherited from superclass ADI.AD9361.TX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.AD9364.Tx/RFBandwidth is inherited from superclass ADI.AD9361.TX AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.AD9364.Tx/AttenuationChannel0 is inherited from superclass ADI.AD9361.TX AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.AD9364.Tx/AttenuationChannel1 is inherited from superclass ADI.AD9361.TX RFPortSelect 'A' 'B'Help for adi.AD9364.Tx/RFPortSelect is inherited from superclass ADI.AD9361.TX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.AD9364.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.AD9364.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.AD9364.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9364.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9364.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9364.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.AD9364.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.AD9364.Tx"},{"location":"sysobjects/adi.AD9371.Rx/","text":"adi.AD9371.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.AD9371.Rx System object is a signal source that can receive complex data from the AD9371. rx = adi.AD9371.Rx; rx = adi.AD9371.Rx('uri','192.168.2.1'); AD9371 Datasheet Documentation for adi.AD9371.Rx doc adi.AD9371.Rx Usage Creation dev = adi.AD9371.Rx dev = adi.AD9371.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. GainControlMode specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC mode GainChannel0 Channel 0 gain, specified as a scalar from -4 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency. GainChannel1 Channel 1 gain, specified as a scalar from -4 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency. LoopbackMode Option to set digital loopback mode, specified as 0 or 1. Allows digital loopback of TX data into the RX path. Value | Mode --------------------------- 0 | Disable 1 | Enable EnableQuadratureTrackingChannel0 Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal. EnableQuadratureTrackingChannel1 Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal. SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomProfile Enable use of custom Profile file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomProfileFileName Path to custom Profile file created from profile wizard CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.AD9371.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.AD9371.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.AD9371.Rx"},{"location":"sysobjects/adi.AD9371.Tx/","text":"adi.AD9371.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.AD9371.Tx System object is a signal sink that can tranmsit complex data from the AD9371. tx = adi.AD9371.Tx; tx = adi.AD9371.Tx('uri','192.168.2.1'); AD9371 Datasheet Documentation for adi.AD9371.Tx doc adi.AD9371.Tx Usage Creation dev = adi.AD9371.Tx dev = adi.AD9371.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB. AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB. SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomProfile Enable use of custom Profile file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomProfileFileName Path to custom Profile file created from profile wizard CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.AD9371.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.AD9371.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.AD9371.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9371.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9371.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.AD9371.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.AD9371.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.AD9371.Tx"},{"location":"sysobjects/adi.ADRV9002.Rx/","text":"adi.ADRV9002.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.ADRV9002.Rx System object is a signal source that can receive complex data from the ADRV9002. rx = adi.ADRV9002.Rx; rx = adi.ADRV9002.Rx('uri','192.168.2.1'); ADRV9002 Datasheet Documentation for adi.ADRV9002.Rx doc adi.ADRV9002.Rx Usage Creation dev = adi.ADRV9002.Rx dev = adi.ADRV9002.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. ENSMModeChannel0 specified as one of the following: 'calibrated' 'primed' 'rf_enabled' ENSMModeChannel1 specified as one of the following: 'calibrated' 'primed' 'rf_enabled' InterfaceGainChannel0 This is the final gain in the digital path with possible values: -36:6:18 This gain should be selected based on primary signal bandwidth. For narrowband applications higher levels of interface gain should be used (0:18) to allow signal level and analog noise to dominate. For wideband applications this gain should be reduced or disabled since quantization noise is minimal. InterfaceGainChannel1 This is the final gain in the digital path with possible values: -36:6:18 This gain should be selected based on primary signal bandwidth. For narrowband applications higher levels of interface gain should be used (0:18) to allow signal level and analog noise to dominate. For wideband applications this gain should be reduced or disabled since quantization noise is minimal. DigitalGainControlModeChannel0 The digital gain control has two major purposes, one for gain correction which is to correct the small step size inaccuracy in analog front-end attenuation and the other for gain compensation which is to compensate for the entire analog front-end attenuation. The digital gain block is controlled by the Rx gain table. Different digital gain will be applied when configured in gain correction or gain compensation mode. The Rx gain table has a unique front-end attenuator setting, with a corresponding amount of digital gain, programmed at each index of the table. In the end of the Rx data path, the interface gain could be further applied by using a \u201cSlicer\u201d block for 2 major purposes. One is to avoid digital saturation in gain compensation mode. The other one is to ensure the overall SNR is limited only by analog noise and unaffected by quantization noise. Gain correction should be used when external components (LNA or DSA) does not need to be controlled. Compensation should be used for external LNA or DSA control. Gain control is specified as one of the following: 'AutomaticGainCorrection' - Automatically adjust interface gain 'ManualGainCorrection' - Manually adjust interface gain 'AutomaticGainCompensation' - Automatically adjust interface gain and external gain element 'ManualGainCompensation' - Manually adjust interface gain and external gain element DigitalGainControlModeChannel1 The digital gain control has two major purposes, one for gain correction which is to correct the small step size inaccuracy in analog front-end attenuation and the other for gain compensation which is to compensate for the entire analog front-end attenuation. The digital gain block is controlled by the Rx gain table. Different digital gain will be applied when configured in gain correction or gain compensation mode. The Rx gain table has a unique front-end attenuator setting, with a corresponding amount of digital gain, programmed at each index of the table. In the end of the Rx data path, the interface gain could be further applied by using a \u201cSlicer\u201d block for 2 major purposes. One is to avoid digital saturation in gain compensation mode. The other one is to ensure the overall SNR is limited only by analog noise and unaffected by quantization noise. Gain correction should be used when external components (LNA or DSA) does not need to be controlled. Compensation should be used for external LNA or DSA control. Gain control is specified as one of the following: 'AutomaticGainCorrection' - Automatically adjust interface gain 'ManualGainCorrection' - Manually adjust interface gain 'AutomaticGainCompensation' - Automatically adjust interface gain and external gain element 'ManualGainCompensation' - Manually adjust interface gain and external gain element AttenuationChannel0 Must be greater than 0 AttenuationChannel1 Must be greater than 0 ENSMPortModeChannel0 specified as one of the following: 'spi' 'pin' ENSMPortModeChannel1 specified as one of the following: 'spi' 'pin' GainControllerSourceChannel0 specified as one of the following: 'spi' 'pin' 'automatic' GainControllerSourceChannel1 specified as one of the following: 'spi' 'pin' 'automatic' PowerdownChannel0 PowerdownChannel1 AGCTrackingChannel0 AGC on the fly tracking calibration for Channel 0 AGCTrackingChannel1 AGC on the fly tracking calibration for Channel 1 BBDCRejectionTrackingChannel0 Baseband DC rejection on the fly tracking calibration for Channel 0 BBDCRejectionTrackingChannel1 Baseband DC rejection on the fly tracking calibration for Channel 1 HDTrackingChannel0 Harmonic Distortion on the fly tracking calibration for Channel 0 HDTrackingChannel1 Harmonic Distortion on the fly tracking calibration for Channel 1 QuadratureFICTrackingChannel0 Quadrature Error Correction Narrowband FIC on the fly tracking calibration for channel 0 QuadratureFICTrackingChannel1 Quadrature Error Correction Narrowband FIC on the fly tracking calibration for channel 1 QuadratureWidebandPolyTrackingChannel0 Quadrature Error Correction Wideband Poly on the fly tracking calibration for channel 0 QuadratureWidebandPolyTrackingChannel1 Quadrature Error Correction Wideband Poly on the fly tracking calibration for channel 1 RFDCTrackingChannel0 RF DC on the fly tracking calibration for channel 0 RFDCTrackingChannel1 RF DC on the fly tracking calibration for channel 1 RSSITrackingChannel0 RSSI on the fly tracking calibration for channel 0 RSSITrackingChannel1 RSSI on the fly tracking calibration for channel 1 RSSIChannel0 Received signal strength indicator. This valid is only valid once the object has been stepped and MATLAB connects to hardware RSSIChannel1 Received signal strength indicator. This valid is only valid once the object has been stepped and MATLAB connects to hardware SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomProfile Enable use of custom Profile file to set SamplingRate, RFBandwidth, and other features of transceiver CustomProfileFileName Path to custom Profile file created from profile wizard CustomStreamFileName Path to custom stream file created from profile wizard SamplingRate Baseband sampling rate in Hz, specified as a scalar in samples per second. This is a read-only property CenterFrequencyChannel0 RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. CenterFrequencyChannel1 RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. NCOCorrectionFrequencyChannel0 NCO correction frequency, specified in Hz as a scalar. The default is 0. This property is tunable. NCOCorrectionFrequencyChannel1 NCO correction frequency, specified in Hz as a scalar. The default is 0. This property is tunable. EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.ADRV9002.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.ADRV9002.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.ADRV9002.Rx"},{"location":"sysobjects/adi.ADRV9002.Tx/","text":"adi.ADRV9002.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.ADRV9002.Tx System object is a signal sink that can tranmsit complex data from the ADRV9002. tx = adi.ADRV9002.Tx; tx = adi.ADRV9002.Tx('uri','192.168.2.1'); ADRV9002 Datasheet Documentation for adi.ADRV9002.Tx doc adi.ADRV9002.Tx Usage Creation dev = adi.ADRV9002.Tx dev = adi.ADRV9002.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. ENSMModeChannel0 specified as one of the following: 'calibrated' 'primed' 'rf_enabled' ENSMModeChannel1 specified as one of the following: 'calibrated' 'primed' 'rf_enabled' AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB. AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB. AttenuationControlModeChannel0 Control attenuation through: - bypass - spi - pin AttenuationControlModeChannel1 Control attenuation through: - bypass - spi - pin PortEnableControlChannel0 specified as one of the following: 'spi' 'pin' PortEnableControlChannel1 specified as one of the following: 'spi' 'pin' ClosedLoopTrackingChannel0 ClosedLoopTrackingChannel1 LOLeakageTrackingChannel0 LOLeakageTrackingChannel1 LoopbackDelayTrackingChannel0 LoopbackDelayTrackingChannel1 PACorrectionTrackingChannel0 PACorrectionTrackingChannel1 QuadratureTrackingChannel0 Quadrature Error Correction on the fly tracking calibration for channel 0 QuadratureTrackingChannel1 Quadrature Error Correction on the fly tracking calibration for channel 1 SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomProfile Enable use of custom Profile file to set SamplingRate, RFBandwidth, and other features of transceiver CustomProfileFileName Path to custom Profile file created from profile wizard CustomStreamFileName Path to custom stream file created from profile wizard SamplingRate Baseband sampling rate in Hz, specified as a scalar in samples per second. This is a read-only property CenterFrequencyChannel0 RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. CenterFrequencyChannel1 RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. NCOCorrectionFrequencyChannel0 NCO correction frequency, specified in Hz as a scalar. The default is 0. This property is tunable. NCOCorrectionFrequencyChannel1 NCO correction frequency, specified in Hz as a scalar. The default is 0. This property is tunable. EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.ADRV9002.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.ADRV9002.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.ADRV9002.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9002.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9002.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9002.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.ADRV9002.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.ADRV9002.Tx"},{"location":"sysobjects/adi.ADRV9009.Rx/","text":"adi.ADRV9009.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.ADRV9009.Rx System object is a signal source that can receive complex data from the ADRV9009. rx = adi.ADRV9009.Rx; rx = adi.ADRV9009.Rx('uri','192.168.2.1'); ADRV9009 Datasheet Documentation for adi.ADRV9009.Rx doc adi.ADRV9009.Rx Usage Creation dev = adi.ADRV9009.Rx dev = adi.ADRV9009.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. GainControlMode specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property GainChannel0 Channel 0 gain, specified as a scalar from 1 dB to 30 dB. The acceptable minimum and maximum gain setting depends on the center frequency. GainChannel1 Channel 1 gain, specified as a scalar from 1 dB to 30 dB. The acceptable minimum and maximum gain setting depends on the center frequency. EnableQuadratureTrackingChannel0 Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal. EnableQuadratureTrackingChannel1 Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal. EnableHarmonicDistortionTrackingChannel0 Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal. EnableHarmonicDistortionTrackingChannel1 Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal. EnableQuadratureCalibration Option to enable quadrature calibration on initialization, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal. EnablePhaseCorrection Option to enable phase tracking, specified as true or false. When this property is true, Phase differences between transceivers will be deterministic across power cycles and LO changes PowerdownChannel0 Logical which will power down RX channel 0 when set PowerdownChannel1 Logical which will power down RX channel 1 when set SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomProfile Enable use of custom Profile file to set SamplingRate, RFBandwidth, and FIR in datapaths EnableFrequencyHoppingModeCalibration Option to enable frequency hopping mode VCO calibration, specified as true or false. When this property is true, at initialization VCO calibration lookup table is populated CustomProfileFileName Path to custom Profile file created from profile wizard CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.ADRV9009.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.ADRV9009.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.ADRV9009.Rx"},{"location":"sysobjects/adi.ADRV9009.Tx/","text":"adi.ADRV9009.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.ADRV9009.Tx System object is a signal sink that can tranmsit complex data from the ADRV9009. tx = adi.ADRV9009.Tx; tx = adi.ADRV9009.Tx('uri','192.168.2.1'); ADRV9009 Datasheet Documentation for adi.ADRV9009.Tx doc adi.ADRV9009.Tx Usage Creation dev = adi.ADRV9009.Tx dev = adi.ADRV9009.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. AttenuationChannel0 Attentuation specified as a scalar from -41.95 to 0 dB with a resolution of 0.05 dB. AttenuationChannel1 Attentuation specified as a scalar from -41.95 to 0 dB with a resolution of 0.05 dB. EnableQuadratureTrackingChannel0 Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the transmitted signal. EnableQuadratureTrackingChannel1 Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the transmitted signal. EnableLOLeakageTrackingChannel0 Option to enable quadrature tracking, specified as true or false. When this property is true, LO leakage compensation is applied to the transmitted signal. EnableLOLeakageTrackingChannel1 Option to enable quadrature tracking, specified as true or false. When this property is true, LO leakage compensation is applied to the transmitted signal. EnableQuadratureCalibration Option to enable quadrature calibration on initialization, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal. EnableLOLeakageCorrection Option to enable phase tracking, specified as true or false. When this property is true, at initialization LO leakage correction will be applied EnableLOLeakageCorrectionExternal Option to enable phase tracking, specified as true or false. When this property is true, at initialization LO leakage correction will be applied within an external loopback path. Note this requires external cabling. PowerdownChannel0 Logical which will power down TX channel 0 when set PowerdownChannel1 Logical which will power down TX channel 1 when set SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomProfile Enable use of custom Profile file to set SamplingRate, RFBandwidth, and FIR in datapaths EnableFrequencyHoppingModeCalibration Option to enable frequency hopping mode VCO calibration, specified as true or false. When this property is true, at initialization VCO calibration lookup table is populated CustomProfileFileName Path to custom Profile file created from profile wizard CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.ADRV9009.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.ADRV9009.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.ADRV9009.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9009.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9009.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9009.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.ADRV9009.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.ADRV9009.Tx"},{"location":"sysobjects/adi.ADRV9361Z7035.Rx/","text":"adi.ADRV9361Z7035.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.ADRV9361Z7035.Rx System object is a signal source that can receive complex data from the ADRV9361Z7035. rx = adi.ADRV9361Z7035.Rx; rx = adi.ADRV9361Z7035.Rx('uri','192.168.2.1'); Product Page See also adi.AD9361.Rx Documentation for adi.ADRV9361Z7035.Rx doc adi.ADRV9361Z7035.Rx Usage Creation dev = adi.ADRV9361Z7035.Rx dev = adi.ADRV9361Z7035.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.ADRV9361Z7035.Rx/CenterFrequency is inherited from superclass ADI.AD9361.RX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.ADRV9361Z7035.Rx/SamplingRate is inherited from superclass ADI.AD9361.RX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.ADRV9361Z7035.Rx/RFBandwidth is inherited from superclass ADI.AD9361.RX GainControlModeChannel0 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.ADRV9361Z7035.Rx/GainControlModeChannel0 is inherited from superclass ADI.AD9361.RX GainChannel0 Channel 0 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.ADRV9361Z7035.Rx/GainChannel0 is inherited from superclass ADI.AD9361.RX GainControlModeChannel1 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.ADRV9361Z7035.Rx/GainControlModeChannel1 is inherited from superclass ADI.AD9361.RX GainChannel1 Channel 1 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.ADRV9361Z7035.Rx/GainChannel1 is inherited from superclass ADI.AD9361.RX LoopbackMode Option to set digital loopback mode, specified as 0, 1 or 2. Allows either to digitally loopback TX data into the RX path or vice versa. Value | Mode --------------------------- 0 | Disable 1 | Digital TX -> Digital RX 2 | RF RX -> RF TX Help for adi.ADRV9361Z7035.Rx/LoopbackMode is inherited from superclass ADI.AD9361.RX EnableQuadratureTracking Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.ADRV9361Z7035.Rx/EnableQuadratureTracking is inherited from superclass ADI.AD9361.RX EnableRFDCTracking Option to enable RF DC tracking, specified as true or false. When this property is true, an RF DC blocking filter is applied to the input signal.Help for adi.ADRV9361Z7035.Rx/EnableRFDCTracking is inherited from superclass ADI.AD9361.RX EnableBasebandDCTracking Option to enable baseband DC tracking, specified as true or false. When this property is true, a baseband DC blocking filter is applied to the input signal.Help for adi.ADRV9361Z7035.Rx/EnableBasebandDCTracking is inherited from superclass ADI.AD9361.RX RFPortSelect 'A_BALANCED' 'B_BALANCED' 'C_BALANCED' 'A_N' 'A_P' 'B_N' 'B_P' 'C_N' 'C_P' 'TX_MONITOR1' 'TX_MONITOR2' 'TX_MONITOR1_2'Help for adi.ADRV9361Z7035.Rx/RFPortSelect is inherited from superclass ADI.AD9361.RX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.ADRV9361Z7035.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.ADRV9361Z7035.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.ADRV9361Z7035.Rx"},{"location":"sysobjects/adi.ADRV9361Z7035.Tx/","text":"adi.ADRV9361Z7035.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.ADRV9361Z7035.Tx System object is a signal source that can send complex data to the FMComms2. tx = adi.ADRV9361Z7035.Tx; tx = adi.ADRV9361Z7035.Tx('uri','192.168.2.1'); Product Page See also adi.AD9361.Tx Documentation for adi.ADRV9361Z7035.Tx doc adi.ADRV9361Z7035.Tx Usage Creation dev = adi.ADRV9361Z7035.Tx dev = adi.ADRV9361Z7035.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.ADRV9361Z7035.Tx/CenterFrequency is inherited from superclass ADI.AD9361.TX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.ADRV9361Z7035.Tx/SamplingRate is inherited from superclass ADI.AD9361.TX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.ADRV9361Z7035.Tx/RFBandwidth is inherited from superclass ADI.AD9361.TX AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.ADRV9361Z7035.Tx/AttenuationChannel0 is inherited from superclass ADI.AD9361.TX AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.ADRV9361Z7035.Tx/AttenuationChannel1 is inherited from superclass ADI.AD9361.TX RFPortSelect 'A' 'B'Help for adi.ADRV9361Z7035.Tx/RFPortSelect is inherited from superclass ADI.AD9361.TX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.ADRV9361Z7035.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.ADRV9361Z7035.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.ADRV9361Z7035.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9361Z7035.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9361Z7035.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9361Z7035.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.ADRV9361Z7035.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.ADRV9361Z7035.Tx"},{"location":"sysobjects/adi.ADRV9364Z7020.Rx/","text":"adi.ADRV9364Z7020.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.ADRV9364Z7020.Tx System object is a signal source that can send complex data to the FMComms4. tx = adi.ADRV9364Z7020.Tx; tx = adi.ADRV9364Z7020.Tx('uri','192.168.2.1'); Product Page See also adi.AD9364.Tx Documentation for adi.ADRV9364Z7020.Rx doc adi.ADRV9364Z7020.Rx Usage Creation dev = adi.ADRV9364Z7020.Rx dev = adi.ADRV9364Z7020.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.ADRV9364Z7020.Rx/CenterFrequency is inherited from superclass ADI.AD9361.RX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.ADRV9364Z7020.Rx/SamplingRate is inherited from superclass ADI.AD9361.RX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.ADRV9364Z7020.Rx/RFBandwidth is inherited from superclass ADI.AD9361.RX GainControlModeChannel0 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.ADRV9364Z7020.Rx/GainControlModeChannel0 is inherited from superclass ADI.AD9361.RX GainChannel0 Channel 0 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.ADRV9364Z7020.Rx/GainChannel0 is inherited from superclass ADI.AD9361.RX GainControlModeChannel1 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.ADRV9364Z7020.Rx/GainControlModeChannel1 is inherited from superclass ADI.AD9361.RX GainChannel1 Channel 1 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.ADRV9364Z7020.Rx/GainChannel1 is inherited from superclass ADI.AD9361.RX LoopbackMode Option to set digital loopback mode, specified as 0, 1 or 2. Allows either to digitally loopback TX data into the RX path or vice versa. Value | Mode --------------------------- 0 | Disable 1 | Digital TX -> Digital RX 2 | RF RX -> RF TX Help for adi.ADRV9364Z7020.Rx/LoopbackMode is inherited from superclass ADI.AD9361.RX EnableQuadratureTracking Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.ADRV9364Z7020.Rx/EnableQuadratureTracking is inherited from superclass ADI.AD9361.RX EnableRFDCTracking Option to enable RF DC tracking, specified as true or false. When this property is true, an RF DC blocking filter is applied to the input signal.Help for adi.ADRV9364Z7020.Rx/EnableRFDCTracking is inherited from superclass ADI.AD9361.RX EnableBasebandDCTracking Option to enable baseband DC tracking, specified as true or false. When this property is true, a baseband DC blocking filter is applied to the input signal.Help for adi.ADRV9364Z7020.Rx/EnableBasebandDCTracking is inherited from superclass ADI.AD9361.RX RFPortSelect 'A_BALANCED' 'B_BALANCED' 'C_BALANCED' 'A_N' 'A_P' 'B_N' 'B_P' 'C_N' 'C_P' 'TX_MONITOR1' 'TX_MONITOR2' 'TX_MONITOR1_2'Help for adi.ADRV9364Z7020.Rx/RFPortSelect is inherited from superclass ADI.AD9361.RX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.ADRV9364Z7020.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.ADRV9364Z7020.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.ADRV9364Z7020.Rx"},{"location":"sysobjects/adi.ADRV9364Z7020.Tx/","text":"adi.ADRV9364Z7020.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.ADRV9364Z7020.Tx System object is a signal sink that can transmit complex data from the FMComms4. tx = adi.ADRV9364Z7020.Tx; tx = adi.ADRV9364Z7020.Tx('uri','192.168.2.1'); Product Page See also adi.AD9364.Tx Documentation for adi.ADRV9364Z7020.Tx doc adi.ADRV9364Z7020.Tx Usage Creation dev = adi.ADRV9364Z7020.Tx dev = adi.ADRV9364Z7020.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.ADRV9364Z7020.Tx/CenterFrequency is inherited from superclass ADI.AD9361.TX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.ADRV9364Z7020.Tx/SamplingRate is inherited from superclass ADI.AD9361.TX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.ADRV9364Z7020.Tx/RFBandwidth is inherited from superclass ADI.AD9361.TX AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.ADRV9364Z7020.Tx/AttenuationChannel0 is inherited from superclass ADI.AD9361.TX AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.ADRV9364Z7020.Tx/AttenuationChannel1 is inherited from superclass ADI.AD9361.TX RFPortSelect 'A' 'B'Help for adi.ADRV9364Z7020.Tx/RFPortSelect is inherited from superclass ADI.AD9361.TX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.ADRV9364Z7020.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.ADRV9364Z7020.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.ADRV9364Z7020.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9364Z7020.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9364Z7020.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9364Z7020.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.ADRV9364Z7020.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.ADRV9364Z7020.Tx"},{"location":"sysobjects/adi.ADRV9371.Rx/","text":"adi.ADRV9371.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.ADRV9371.Rx System object is a signal source that can receive complex data from the ADRV9371. rx = adi.AD9371.Rx; rx = adi.AD9371.Rx('uri','192.168.2.1'); Product Page See also adi.AD9371.Rx Documentation for adi.ADRV9371.Rx doc adi.ADRV9371.Rx Usage Creation dev = adi.ADRV9371.Rx dev = adi.ADRV9371.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. GainControlMode specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.ADRV9371.Rx/GainControlMode is inherited from superclass ADI.AD9371.RX GainChannel0 Channel 0 gain, specified as a scalar from -4 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.ADRV9371.Rx/GainChannel0 is inherited from superclass ADI.AD9371.RX GainChannel1 Channel 1 gain, specified as a scalar from -4 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.ADRV9371.Rx/GainChannel1 is inherited from superclass ADI.AD9371.RX LoopbackMode Option to set digital loopback mode, specified as 0 or 1. Allows digital loopback of TX data into the RX path. Value | Mode --------------------------- 0 | Disable 1 | EnableHelp for adi.ADRV9371.Rx/LoopbackMode is inherited from superclass ADI.AD9371.RX EnableQuadratureTrackingChannel0 Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.ADRV9371.Rx/EnableQuadratureTrackingChannel0 is inherited from superclass ADI.AD9371.RX EnableQuadratureTrackingChannel1 Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.ADRV9371.Rx/EnableQuadratureTrackingChannel1 is inherited from superclass ADI.AD9371.RX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomProfile Enable use of custom Profile file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomProfileFileName Path to custom Profile file created from profile wizard CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.ADRV9371.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.ADRV9371.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.ADRV9371.Rx"},{"location":"sysobjects/adi.ADRV9371.Tx/","text":"adi.ADRV9371.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.ADRV9371.Tx System object is a signal sink that can send complex data to the ADRV9371. tx = adi.AD9371.Tx; tx = adi.AD9371.Tx('uri','192.168.2.1'); Product Page See also adi.AD9371.Tx Documentation for adi.ADRV9371.Tx doc adi.ADRV9371.Tx Usage Creation dev = adi.ADRV9371.Tx dev = adi.ADRV9371.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.ADRV9371.Tx/AttenuationChannel0 is inherited from superclass ADI.AD9371.TX AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.ADRV9371.Tx/AttenuationChannel1 is inherited from superclass ADI.AD9371.TX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomProfile Enable use of custom Profile file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomProfileFileName Path to custom Profile file created from profile wizard CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable. EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.ADRV9371.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.ADRV9371.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.ADRV9371.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9371.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9371.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.ADRV9371.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.ADRV9371.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.ADRV9371.Tx"},{"location":"sysobjects/adi.FMComms2.Rx/","text":"adi.FMComms2.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.FMComms2.Rx System object is a signal source that can receive complex data from the FMComms2. rx = adi.FMComms2.Rx; rx = adi.FMComms2.Rx('uri','192.168.2.1'); Product Page See also adi.AD9361.Rx Documentation for adi.FMComms2.Rx doc adi.FMComms2.Rx Usage Creation dev = adi.FMComms2.Rx dev = adi.FMComms2.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.FMComms2.Rx/CenterFrequency is inherited from superclass ADI.AD9361.RX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.FMComms2.Rx/SamplingRate is inherited from superclass ADI.AD9361.RX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.FMComms2.Rx/RFBandwidth is inherited from superclass ADI.AD9361.RX GainControlModeChannel0 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.FMComms2.Rx/GainControlModeChannel0 is inherited from superclass ADI.AD9361.RX GainChannel0 Channel 0 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.FMComms2.Rx/GainChannel0 is inherited from superclass ADI.AD9361.RX GainControlModeChannel1 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.FMComms2.Rx/GainControlModeChannel1 is inherited from superclass ADI.AD9361.RX GainChannel1 Channel 1 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.FMComms2.Rx/GainChannel1 is inherited from superclass ADI.AD9361.RX LoopbackMode Option to set digital loopback mode, specified as 0, 1 or 2. Allows either to digitally loopback TX data into the RX path or vice versa. Value | Mode --------------------------- 0 | Disable 1 | Digital TX -> Digital RX 2 | RF RX -> RF TX Help for adi.FMComms2.Rx/LoopbackMode is inherited from superclass ADI.AD9361.RX EnableQuadratureTracking Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.FMComms2.Rx/EnableQuadratureTracking is inherited from superclass ADI.AD9361.RX EnableRFDCTracking Option to enable RF DC tracking, specified as true or false. When this property is true, an RF DC blocking filter is applied to the input signal.Help for adi.FMComms2.Rx/EnableRFDCTracking is inherited from superclass ADI.AD9361.RX EnableBasebandDCTracking Option to enable baseband DC tracking, specified as true or false. When this property is true, a baseband DC blocking filter is applied to the input signal.Help for adi.FMComms2.Rx/EnableBasebandDCTracking is inherited from superclass ADI.AD9361.RX RFPortSelect 'A_BALANCED' 'B_BALANCED' 'C_BALANCED' 'A_N' 'A_P' 'B_N' 'B_P' 'C_N' 'C_P' 'TX_MONITOR1' 'TX_MONITOR2' 'TX_MONITOR1_2'Help for adi.FMComms2.Rx/RFPortSelect is inherited from superclass ADI.AD9361.RX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.FMComms2.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.FMComms2.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.FMComms2.Rx"},{"location":"sysobjects/adi.FMComms2.Tx/","text":"adi.FMComms2.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.FMComms2.Tx System object is a signal source that can send complex data to the FMComms2. tx = adi.FMComms2.Tx; tx = adi.FMComms2.Tx('uri','192.168.2.1'); Product Page See also adi.AD9361.Tx Documentation for adi.FMComms2.Tx doc adi.FMComms2.Tx Usage Creation dev = adi.FMComms2.Tx dev = adi.FMComms2.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.FMComms2.Tx/CenterFrequency is inherited from superclass ADI.AD9361.TX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.FMComms2.Tx/SamplingRate is inherited from superclass ADI.AD9361.TX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.FMComms2.Tx/RFBandwidth is inherited from superclass ADI.AD9361.TX AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.FMComms2.Tx/AttenuationChannel0 is inherited from superclass ADI.AD9361.TX AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.FMComms2.Tx/AttenuationChannel1 is inherited from superclass ADI.AD9361.TX RFPortSelect 'A' 'B'Help for adi.FMComms2.Tx/RFPortSelect is inherited from superclass ADI.AD9361.TX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.FMComms2.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.FMComms2.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.FMComms2.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.FMComms2.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.FMComms2.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.FMComms2.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.FMComms2.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.FMComms2.Tx"},{"location":"sysobjects/adi.FMComms3.Rx/","text":"adi.FMComms3.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.FMComms3.Rx System object is a signal source that can receive complex data from the FMComms2. rx = adi.FMComms3.Rx; rx = adi.FMComms3.Rx('uri','192.168.2.1'); Product Page See also adi.AD9361.Rx Documentation for adi.FMComms3.Rx doc adi.FMComms3.Rx Usage Creation dev = adi.FMComms3.Rx dev = adi.FMComms3.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.FMComms3.Rx/CenterFrequency is inherited from superclass ADI.AD9361.RX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.FMComms3.Rx/SamplingRate is inherited from superclass ADI.AD9361.RX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.FMComms3.Rx/RFBandwidth is inherited from superclass ADI.AD9361.RX GainControlModeChannel0 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.FMComms3.Rx/GainControlModeChannel0 is inherited from superclass ADI.AD9361.RX GainChannel0 Channel 0 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.FMComms3.Rx/GainChannel0 is inherited from superclass ADI.AD9361.RX GainControlModeChannel1 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.FMComms3.Rx/GainControlModeChannel1 is inherited from superclass ADI.AD9361.RX GainChannel1 Channel 1 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.FMComms3.Rx/GainChannel1 is inherited from superclass ADI.AD9361.RX LoopbackMode Option to set digital loopback mode, specified as 0, 1 or 2. Allows either to digitally loopback TX data into the RX path or vice versa. Value | Mode --------------------------- 0 | Disable 1 | Digital TX -> Digital RX 2 | RF RX -> RF TX Help for adi.FMComms3.Rx/LoopbackMode is inherited from superclass ADI.AD9361.RX EnableQuadratureTracking Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.FMComms3.Rx/EnableQuadratureTracking is inherited from superclass ADI.AD9361.RX EnableRFDCTracking Option to enable RF DC tracking, specified as true or false. When this property is true, an RF DC blocking filter is applied to the input signal.Help for adi.FMComms3.Rx/EnableRFDCTracking is inherited from superclass ADI.AD9361.RX EnableBasebandDCTracking Option to enable baseband DC tracking, specified as true or false. When this property is true, a baseband DC blocking filter is applied to the input signal.Help for adi.FMComms3.Rx/EnableBasebandDCTracking is inherited from superclass ADI.AD9361.RX RFPortSelect 'A_BALANCED' 'B_BALANCED' 'C_BALANCED' 'A_N' 'A_P' 'B_N' 'B_P' 'C_N' 'C_P' 'TX_MONITOR1' 'TX_MONITOR2' 'TX_MONITOR1_2'Help for adi.FMComms3.Rx/RFPortSelect is inherited from superclass ADI.AD9361.RX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.FMComms3.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.FMComms3.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.FMComms3.Rx"},{"location":"sysobjects/adi.FMComms3.Tx/","text":"adi.FMComms3.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.FMComms3.Tx System object is a signal source that can send complex data to the FMComms2. tx = adi.FMComms3.Tx; tx = adi.FMComms3.Tx('uri','192.168.2.1'); Product Page See also adi.AD9361.Tx Documentation for adi.FMComms3.Tx doc adi.FMComms3.Tx Usage Creation dev = adi.FMComms3.Tx dev = adi.FMComms3.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.FMComms3.Tx/CenterFrequency is inherited from superclass ADI.AD9361.TX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.FMComms3.Tx/SamplingRate is inherited from superclass ADI.AD9361.TX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.FMComms3.Tx/RFBandwidth is inherited from superclass ADI.AD9361.TX AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.FMComms3.Tx/AttenuationChannel0 is inherited from superclass ADI.AD9361.TX AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.FMComms3.Tx/AttenuationChannel1 is inherited from superclass ADI.AD9361.TX RFPortSelect 'A' 'B'Help for adi.FMComms3.Tx/RFPortSelect is inherited from superclass ADI.AD9361.TX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.FMComms3.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.FMComms3.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.FMComms3.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.FMComms3.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.FMComms3.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.FMComms3.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.FMComms3.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.FMComms3.Tx"},{"location":"sysobjects/adi.FMComms4.Rx/","text":"adi.FMComms4.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.FMComms4.Tx System object is a signal source that can send complex data to the FMComms4. tx = adi.FMComms4.Tx; tx = adi.FMComms4.Tx('uri','192.168.2.1'); Product Page See also adi.AD9364.Tx Documentation for adi.FMComms4.Rx doc adi.FMComms4.Rx Usage Creation dev = adi.FMComms4.Rx dev = adi.FMComms4.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.FMComms4.Rx/CenterFrequency is inherited from superclass ADI.AD9361.RX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.FMComms4.Rx/SamplingRate is inherited from superclass ADI.AD9361.RX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.FMComms4.Rx/RFBandwidth is inherited from superclass ADI.AD9361.RX GainControlModeChannel0 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.FMComms4.Rx/GainControlModeChannel0 is inherited from superclass ADI.AD9361.RX GainChannel0 Channel 0 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.FMComms4.Rx/GainChannel0 is inherited from superclass ADI.AD9361.RX GainControlModeChannel1 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.FMComms4.Rx/GainControlModeChannel1 is inherited from superclass ADI.AD9361.RX GainChannel1 Channel 1 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.FMComms4.Rx/GainChannel1 is inherited from superclass ADI.AD9361.RX LoopbackMode Option to set digital loopback mode, specified as 0, 1 or 2. Allows either to digitally loopback TX data into the RX path or vice versa. Value | Mode --------------------------- 0 | Disable 1 | Digital TX -> Digital RX 2 | RF RX -> RF TX Help for adi.FMComms4.Rx/LoopbackMode is inherited from superclass ADI.AD9361.RX EnableQuadratureTracking Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.FMComms4.Rx/EnableQuadratureTracking is inherited from superclass ADI.AD9361.RX EnableRFDCTracking Option to enable RF DC tracking, specified as true or false. When this property is true, an RF DC blocking filter is applied to the input signal.Help for adi.FMComms4.Rx/EnableRFDCTracking is inherited from superclass ADI.AD9361.RX EnableBasebandDCTracking Option to enable baseband DC tracking, specified as true or false. When this property is true, a baseband DC blocking filter is applied to the input signal.Help for adi.FMComms4.Rx/EnableBasebandDCTracking is inherited from superclass ADI.AD9361.RX RFPortSelect 'A_BALANCED' 'B_BALANCED' 'C_BALANCED' 'A_N' 'A_P' 'B_N' 'B_P' 'C_N' 'C_P' 'TX_MONITOR1' 'TX_MONITOR2' 'TX_MONITOR1_2'Help for adi.FMComms4.Rx/RFPortSelect is inherited from superclass ADI.AD9361.RX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.FMComms4.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.FMComms4.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.FMComms4.Rx"},{"location":"sysobjects/adi.FMComms4.Tx/","text":"adi.FMComms4.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.FMComms4.Tx System object is a signal sink that can transmit complex data from the FMComms4. tx = adi.FMComms4.Tx; tx = adi.FMComms4.Tx('uri','192.168.2.1'); Product Page See also adi.AD9364.Tx Documentation for adi.FMComms4.Tx doc adi.FMComms4.Tx Usage Creation dev = adi.FMComms4.Tx dev = adi.FMComms4.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.FMComms4.Tx/CenterFrequency is inherited from superclass ADI.AD9361.TX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.FMComms4.Tx/SamplingRate is inherited from superclass ADI.AD9361.TX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.FMComms4.Tx/RFBandwidth is inherited from superclass ADI.AD9361.TX AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.FMComms4.Tx/AttenuationChannel0 is inherited from superclass ADI.AD9361.TX AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.FMComms4.Tx/AttenuationChannel1 is inherited from superclass ADI.AD9361.TX RFPortSelect 'A' 'B'Help for adi.FMComms4.Tx/RFPortSelect is inherited from superclass ADI.AD9361.TX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.FMComms4.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.FMComms4.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.FMComms4.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.FMComms4.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.FMComms4.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.FMComms4.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.FMComms4.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.FMComms4.Tx"},{"location":"sysobjects/adi.PackRF.Rx/","text":"adi.PackRF.Rx Receive data from Analog Devices AD9361 transceiver Description Documentation for adi.PackRF.Rx doc adi.PackRF.Rx Usage Creation dev = adi.PackRF.Rx dev = adi.PackRF.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.PackRF.Rx/CenterFrequency is inherited from superclass ADI.AD9361.RX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.PackRF.Rx/SamplingRate is inherited from superclass ADI.AD9361.RX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.PackRF.Rx/RFBandwidth is inherited from superclass ADI.AD9361.RX GainControlModeChannel0 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.PackRF.Rx/GainControlModeChannel0 is inherited from superclass ADI.AD9361.RX GainChannel0 Channel 0 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.PackRF.Rx/GainChannel0 is inherited from superclass ADI.AD9361.RX GainControlModeChannel1 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.PackRF.Rx/GainControlModeChannel1 is inherited from superclass ADI.AD9361.RX GainChannel1 Channel 1 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.PackRF.Rx/GainChannel1 is inherited from superclass ADI.AD9361.RX LoopbackMode Option to set digital loopback mode, specified as 0, 1 or 2. Allows either to digitally loopback TX data into the RX path or vice versa. Value | Mode --------------------------- 0 | Disable 1 | Digital TX -> Digital RX 2 | RF RX -> RF TX Help for adi.PackRF.Rx/LoopbackMode is inherited from superclass ADI.AD9361.RX EnableQuadratureTracking Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.PackRF.Rx/EnableQuadratureTracking is inherited from superclass ADI.AD9361.RX EnableRFDCTracking Option to enable RF DC tracking, specified as true or false. When this property is true, an RF DC blocking filter is applied to the input signal.Help for adi.PackRF.Rx/EnableRFDCTracking is inherited from superclass ADI.AD9361.RX EnableBasebandDCTracking Option to enable baseband DC tracking, specified as true or false. When this property is true, a baseband DC blocking filter is applied to the input signal.Help for adi.PackRF.Rx/EnableBasebandDCTracking is inherited from superclass ADI.AD9361.RX RFPortSelect 'A_BALANCED' 'B_BALANCED' 'C_BALANCED' 'A_N' 'A_P' 'B_N' 'B_P' 'C_N' 'C_P' 'TX_MONITOR1' 'TX_MONITOR2' 'TX_MONITOR1_2'Help for adi.PackRF.Rx/RFPortSelect is inherited from superclass ADI.AD9361.RX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.PackRF.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.PackRF.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.PackRF.Rx"},{"location":"sysobjects/adi.PackRF.Tx/","text":"adi.PackRF.Tx Receive data from Analog Devices AD9361 transceiver Description Documentation for adi.PackRF.Tx doc adi.PackRF.Tx Usage Creation dev = adi.PackRF.Tx dev = adi.PackRF.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.PackRF.Tx/CenterFrequency is inherited from superclass ADI.AD9361.TX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.PackRF.Tx/SamplingRate is inherited from superclass ADI.AD9361.TX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.PackRF.Tx/RFBandwidth is inherited from superclass ADI.AD9361.TX AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.PackRF.Tx/AttenuationChannel0 is inherited from superclass ADI.AD9361.TX AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.PackRF.Tx/AttenuationChannel1 is inherited from superclass ADI.AD9361.TX RFPortSelect 'A' 'B'Help for adi.PackRF.Tx/RFPortSelect is inherited from superclass ADI.AD9361.TX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.PackRF.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.PackRF.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.PackRF.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.PackRF.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.PackRF.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.PackRF.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.PackRF.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.PackRF.Tx"},{"location":"sysobjects/adi.Pluto.Rx/","text":"adi.Pluto.Rx Receive data from Analog Devices AD9361 transceiver Description The adi.Pluto.Tx System object is a signal source that can send complex data to the Pluto. tx = adi.Pluto.Tx; tx = adi.Pluto.Tx('uri','192.168.2.1'); Product Page See also adi.AD9363.Tx Documentation for adi.Pluto.Rx doc adi.Pluto.Rx Usage Creation dev = adi.Pluto.Rx dev = adi.Pluto.Rx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.Pluto.Rx/CenterFrequency is inherited from superclass ADI.AD9361.RX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.Pluto.Rx/SamplingRate is inherited from superclass ADI.AD9361.RX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.Pluto.Rx/RFBandwidth is inherited from superclass ADI.AD9361.RX GainControlModeChannel0 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.Pluto.Rx/GainControlModeChannel0 is inherited from superclass ADI.AD9361.RX GainChannel0 Channel 0 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.Pluto.Rx/GainChannel0 is inherited from superclass ADI.AD9361.RX GainControlModeChannel1 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.Pluto.Rx/GainControlModeChannel1 is inherited from superclass ADI.AD9361.RX GainChannel1 Channel 1 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.Pluto.Rx/GainChannel1 is inherited from superclass ADI.AD9361.RX LoopbackMode Option to set digital loopback mode, specified as 0, 1 or 2. Allows either to digitally loopback TX data into the RX path or vice versa. Value | Mode --------------------------- 0 | Disable 1 | Digital TX -> Digital RX 2 | RF RX -> RF TX Help for adi.Pluto.Rx/LoopbackMode is inherited from superclass ADI.AD9361.RX EnableQuadratureTracking Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.Pluto.Rx/EnableQuadratureTracking is inherited from superclass ADI.AD9361.RX EnableRFDCTracking Option to enable RF DC tracking, specified as true or false. When this property is true, an RF DC blocking filter is applied to the input signal.Help for adi.Pluto.Rx/EnableRFDCTracking is inherited from superclass ADI.AD9361.RX EnableBasebandDCTracking Option to enable baseband DC tracking, specified as true or false. When this property is true, a baseband DC blocking filter is applied to the input signal.Help for adi.Pluto.Rx/EnableBasebandDCTracking is inherited from superclass ADI.AD9361.RX RFPortSelect 'A_BALANCED' 'B_BALANCED' 'C_BALANCED' 'A_N' 'A_P' 'B_N' 'B_P' 'C_N' 'C_P' 'TX_MONITOR1' 'TX_MONITOR2' 'TX_MONITOR1_2'Help for adi.Pluto.Rx/RFPortSelect is inherited from superclass ADI.AD9361.RX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.Pluto.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.Pluto.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"adi.Pluto.Rx"},{"location":"sysobjects/adi.Pluto.Tx/","text":"adi.Pluto.Tx Receive data from Analog Devices AD9361 transceiver Description The adi.Pluto.Tx System object is a signal sink that can transmit complex data from the Pluto. tx = adi.Pluto.Tx; tx = adi.Pluto.Tx('uri','192.168.2.1'); Product Page See also adi.AD9363.Tx Documentation for adi.Pluto.Tx doc adi.Pluto.Tx Usage Creation dev = adi.Pluto.Tx dev = adi.Pluto.Tx(Name, Value) Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.Pluto.Tx/CenterFrequency is inherited from superclass ADI.AD9361.TX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.Pluto.Tx/SamplingRate is inherited from superclass ADI.AD9361.TX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.Pluto.Tx/RFBandwidth is inherited from superclass ADI.AD9361.TX AttenuationChannel0 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.Pluto.Tx/AttenuationChannel0 is inherited from superclass ADI.AD9361.TX AttenuationChannel1 Attentuation specified as a scalar from -89.75 to 0 dB with a resolution of 0.25 dB.Help for adi.Pluto.Tx/AttenuationChannel1 is inherited from superclass ADI.AD9361.TX RFPortSelect 'A' 'B'Help for adi.Pluto.Tx/RFPortSelect is inherited from superclass ADI.AD9361.TX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.Pluto.Tx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.Pluto.Tx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE DataSource Data source, specified as one of the following: 'DMA' \u2014 Specify the host as the source of the data. 'DDS' \u2014 Specify the DDS on the radio hardware as the source of the data. In this case, each channel has two additive tones.Help for adi.Pluto.Tx/DataSource is inherited from superclass ADI.COMMON.DDS DDSFrequencies Frequencies values in Hz of the DDS tone generators. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.Pluto.Tx/DDSFrequencies is inherited from superclass ADI.COMMON.DDS DDSScales Scale of DDS tones in range [0,1]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.Pluto.Tx/DDSScales is inherited from superclass ADI.COMMON.DDS DDSPhases Phases of DDS tones in range [0,360000]. For complex data devices the input is a [2xN] matrix where N is the available channels on the board. For complex data devices this is at most max(EnabledChannels)*2. For non-complex data devices this is at most max(EnabledChannels). If N < this upper limit, other DDSs are not set.Help for adi.Pluto.Tx/DDSPhases is inherited from superclass ADI.COMMON.DDS EnableCyclicBuffers Enable Cyclic Buffers, configures transmit buffers to be cyclic, which makes them continuously repeatHelp for adi.Pluto.Tx/EnableCyclicBuffers is inherited from superclass ADI.COMMON.DDS","title":"adi.Pluto.Tx"},{"location":"sysobjects/output1/","text":"adi.Pluto.Rx Receive data from Analog Devices AD9361 transceiver Description The comm.SDRRxPluto System object\u2122 is a signal source that receives data from an Analog Devices\u00ae ADALM-PLUTO radio. This connection enables you to simulate and develop various software-defined radio applications. The following diagram shows the interaction between MATLAB\u00ae, the comm.SDRRxPluto System object, and the radio hardware. Creation Syntax Properties Unless otherwise indicated, properties are nontunable, which means you cannot change their values after calling the object. Objects lock when you call them, and the release function unlocks them. If a property is tunable, you can change its value at any time. For more information on changing property values, see System Design in MATLAB Using System Objects. CenterFrequency RF center frequency, specified in Hz as a scalar. The default is 2.4e9. This property is tunable.Help for adi.Pluto.Rx/CenterFrequency is inherited from superclass ADI.AD9361.RX SamplingRate Baseband sampling rate in Hz, specified as a scalar from 65105 to 61.44e6 samples per second.Help for adi.Pluto.Rx/SamplingRate is inherited from superclass ADI.AD9361.RX RFBandwidth RF Bandwidth of front-end analog filter in Hz, specified as a scalar from 200 kHz to 56 MHz.Help for adi.Pluto.Rx/RFBandwidth is inherited from superclass ADI.AD9361.RX GainControlModeChannel0 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.Pluto.Rx/GainControlModeChannel0 is inherited from superclass ADI.AD9361.RX GainChannel0 Channel 0 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.Pluto.Rx/GainChannel0 is inherited from superclass ADI.AD9361.RX GainControlModeChannel1 specified as one of the following: 'slow_attack' \u2014 For signals with slowly changing power levels 'fast_attack' \u2014 For signals with rapidly changing power levels 'manual' \u2014 For setting the gain manually with the Gain property 'hybrid' \u2014 For configuring hybrid AGC modeHelp for adi.Pluto.Rx/GainControlModeChannel1 is inherited from superclass ADI.AD9361.RX GainChannel1 Channel 1 gain, specified as a scalar from -3 dB to 71 dB. The acceptable minimum and maximum gain setting depends on the center frequency.Help for adi.Pluto.Rx/GainChannel1 is inherited from superclass ADI.AD9361.RX LoopbackMode Option to set digital loopback mode, specified as 0, 1 or 2. Allows either to digitally loopback TX data into the RX path or vice versa. Value | Mode --------------------------- 0 | Disable 1 | Digital TX -> Digital RX 2 | RF RX -> RF TX Help for adi.Pluto.Rx/LoopbackMode is inherited from superclass ADI.AD9361.RX EnableQuadratureTracking Option to enable quadrature tracking, specified as true or false. When this property is true, IQ imbalance compensation is applied to the input signal.Help for adi.Pluto.Rx/EnableQuadratureTracking is inherited from superclass ADI.AD9361.RX EnableRFDCTracking Option to enable RF DC tracking, specified as true or false. When this property is true, an RF DC blocking filter is applied to the input signal.Help for adi.Pluto.Rx/EnableRFDCTracking is inherited from superclass ADI.AD9361.RX EnableBasebandDCTracking Option to enable baseband DC tracking, specified as true or false. When this property is true, a baseband DC blocking filter is applied to the input signal.Help for adi.Pluto.Rx/EnableBasebandDCTracking is inherited from superclass ADI.AD9361.RX RFPortSelect 'A_BALANCED' 'B_BALANCED' 'C_BALANCED' 'A_N' 'A_P' 'B_N' 'B_P' 'C_N' 'C_P' 'TX_MONITOR1' 'TX_MONITOR2' 'TX_MONITOR1_2'Help for adi.Pluto.Rx/RFPortSelect is inherited from superclass ADI.AD9361.RX SamplesPerFrame Number of samples per frame, specified as an even positive integer from 2 to 16,777,216. Using values less than 3660 can yield poor performance. EnableCustomFilter Enable use of custom filter file to set SamplingRate, RFBandwidth, and FIR in datapaths CustomFilterFileName Path to custom filter file created from filter wizard EnabledChannels Indexs of channels to be enabled. Input should be a [1xN] vector with the indexes of channels to be enabled. Order is irrelevant uri Hostname or IP address of remote libIIO deviceHelp for adi.Pluto.Rx/uri is inherited from superclass MATLABSHARED.LIBIIO.BASE enIO If true, connects to libIIO device during simulationHelp for adi.Pluto.Rx/enIO is inherited from superclass MATLABSHARED.LIBIIO.BASE","title":"Output1"}]}