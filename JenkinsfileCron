@Library('tfc-lib') _

dockerConfig = getDockerConfig(['MATLAB','Vivado'], matlabHSPro=false)
dockerConfig.add("-e MLRELEASE=R2022a")
dockerHost = 'docker'

////////////////////////////

hdlBranches = ['hdl_2021_r1']

stage("Build Toolbox") {
    dockerParallelBuild(hdlBranches, dockerHost, dockerConfig) { 
	branchName ->
	try {
		withEnv(['HDLBRANCH='+branchName,'LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
		    checkout scm
		    sh 'git submodule update --init' 
		    sh 'make -C ./CI/scripts build'
		    sh 'pip3 install -r requirements_doc.txt'
		    sh 'make -C ./CI/gen_doc doc_ml'
		    sh 'make -C ./CI/scripts add_libad9361'
		    sh 'make -C ./CI/scripts gen_tlbx'
		}
        } catch(Exception ex) {
		if (branchName == 'hdl_2021_r1') {
		    error('Production Toolbox Build Failed')
		}
		else {
		    unstable('Development Build Failed')
		}
        }
        if (branchName == 'hdl_2021_r1') {
            stash includes: '**', name: 'builtSources', useDefaultExcludes: false
        }
    }
}

/////////////////////////////////////////////////////
def deployments = [:]

deployments['vm1'] = { node("vm1") {
    stage("Synthesis Tests") {
        withEnv(['BOARD=zed','MLRELEASE=R2022a','HDLBRANCH=hdl_2021_r1','LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
            try {
                stage("Synth") {
                    unstash "builtSources"
                    sh 'make -C ./CI/scripts test_synth'
                    junit testResults: 'test/*.xml', allowEmptyResults: true
                    archiveArtifacts artifacts: 'test/logs/*', followSymlinks: false, allowEmptyArchive: true
		            archiveArtifacts artifacts: '*BOOT.BIN*', followSymlinks: false, allowEmptyArchive: true
                }
            }
            finally {
                cleanWs();
            }
        }
    }
}}

/////////////////////////////////////////////////////

deployments['vm2'] = { node("vm2") {
    stage("Synthesis Tests") {
        withEnv(['BOARD=zc702','MLRELEASE=R2022a','HDLBRANCH=hdl_2021_r1','LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
            try {
                stage("Synth") {
                    unstash "builtSources"
                    sh 'make -C ./CI/scripts test_synth'
                    junit testResults: 'test/*.xml', allowEmptyResults: true
                    archiveArtifacts artifacts: 'test/logs/*', followSymlinks: false, allowEmptyArchive: true
		            archiveArtifacts artifacts: '*BOOT.BIN*', followSymlinks: false, allowEmptyArchive: true
                }
            }
            finally {
                cleanWs();
            }
        }
    }
}}

/////////////////////////////////////////////////////

deployments['vm3'] = { node("vm1") {
    stage("Synthesis Tests") {
        withEnv(['BOARD=zc706','MLRELEASE=R2022a','HDLBRANCH=hdl_2021_r1','LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
            try {
                stage("Synth") {
                    unstash "builtSources"
                    sh 'make -C ./CI/scripts test_synth'
                    junit testResults: 'test/*.xml', allowEmptyResults: true
                    archiveArtifacts artifacts: 'test/logs/*', followSymlinks: false, allowEmptyArchive: true
		            archiveArtifacts artifacts: '*BOOT.BIN*', followSymlinks: false, allowEmptyArchive: true
                }
            }
            finally {
                cleanWs();
            }
        }
    }
}}

/////////////////////////////////////////////////////

deployments['vm4'] = { node("vm2") {
    stage("Synthesis Tests") {
        withEnv(['BOARD=zcu102','MLRELEASE=R2022a','HDLBRANCH=hdl_2021_r1','LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
            try {
                stage("Synth") {
                    unstash "builtSources"
                    sh 'make -C ./CI/scripts test_synth'
                    junit testResults: 'test/*.xml', allowEmptyResults: true
                    archiveArtifacts artifacts: 'test/logs/*', followSymlinks: false, allowEmptyArchive: true
		            archiveArtifacts artifacts: '*BOOT.BIN*', followSymlinks: false, allowEmptyArchive: true
                }
            }
            finally {
                cleanWs();
            }
        }
    }
}}

/////////////////////////////////////////////////////

deployments['vm5'] = { node("vm1") {
    stage("Synthesis Tests") {
        withEnv(['BOARD=adrv9361','MLRELEASE=R2022a','HDLBRANCH=hdl_2021_r1','LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
            try {
                stage("Synth") {
                    unstash "builtSources"
                    sh 'make -C ./CI/scripts test_synth'
                    junit testResults: 'test/*.xml', allowEmptyResults: true
                    archiveArtifacts artifacts: 'test/logs/*', followSymlinks: false, allowEmptyArchive: true
		            archiveArtifacts artifacts: '*BOOT.BIN*', followSymlinks: false, allowEmptyArchive: true
                }
            }
            finally {
                cleanWs();
            }
        }
    }
}}

/////////////////////////////////////////////////////

deployments['vm6'] = { node("vm2") {
    stage("Synthesis Tests") {
        withEnv(['BOARD=adrv9364','MLRELEASE=R2022a','HDLBRANCH=hdl_2021_r1','LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
            try {
                stage("Synth") {
                    unstash "builtSources"
                    sh 'make -C ./CI/scripts test_synth'
                    junit testResults: 'test/*.xml', allowEmptyResults: true
                    archiveArtifacts artifacts: 'test/logs/*', followSymlinks: false, allowEmptyArchive: true
		            archiveArtifacts artifacts: '*BOOT.BIN*', followSymlinks: false, allowEmptyArchive: true
                }
            }
            finally {
                cleanWs();
            }
        }
    }
}}

/////////////////////////////////////////////////////

deployments['vm7'] = { node("vm1") {
    stage("Synthesis Tests") {
        withEnv(['BOARD=pluto','MLRELEASE=R2022a','HDLBRANCH=hdl_2021_r1','LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
            try {
                stage("Synth") {
                    unstash "builtSources"
                    sh 'make -C ./CI/scripts test_synth'
                    junit testResults: 'test/*.xml', allowEmptyResults: true
                    archiveArtifacts artifacts: 'test/logs/*', followSymlinks: false, allowEmptyArchive: true
		            archiveArtifacts artifacts: '*BOOT.BIN*', followSymlinks: false, allowEmptyArchive: true
                }
            }
            finally {
                cleanWs();
            }
        }
    }
}}
parallel deployments
