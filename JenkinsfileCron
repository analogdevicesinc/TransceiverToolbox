@Library('tfc-lib') _

dockerConfig = getDockerConfig(['MATLAB','Vivado'], matlabHSPro=false)
dockerConfig.add("-e MLRELEASE=R2021b")
dockerHost = 'docker'

////////////////////////////

hdlBranches = ['master','hdl_2019_r2']

stage("Build Toolbox") {
    dockerParallelBuild(hdlBranches, dockerHost, dockerConfig) { 
	branchName ->
	try {
		withEnv(['HDLBRANCH='+branchName,'LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
		    checkout scm
		    sh 'git submodule update --init' 
		    sh 'make -C ./CI/scripts build'
		    sh 'pip3 install -r requirements_doc.txt'
		    sh 'make -C ./CI/gen_doc doc_ml'
		    sh 'make -C ./CI/scripts add_libad9361'
		    sh 'make -C ./CI/scripts gen_tlbx'
		}
        } catch(Exception ex) {
		if (branchName == 'hdl_2019_r2') {
		    error('Production Toolbox Build Failed')
		}
		else {
		    unstable('Development Build Failed')
		}
        }
        if (branchName == 'hdl_2019_r2') {
            stash includes: '**', name: 'builtSources', useDefaultExcludes: false
            archiveArtifacts artifacts: 'hdl/*', followSymlinks: false, allowEmptyArchive: true
        }
    }
}

/////////////////////////////////////////////////////
/*
boardNames = ['zed','zc702','zc706','zcu102','adrv9361','adrv9364','pluto']
dockerConfig.add("-e HDLBRANCH=hdl_2019_r2")

stage("HDL Tests") {
    dockerParallelBuild(boardNames, dockerHost, dockerConfig) { 
        branchName ->
        withEnv(['BOARD='+branchName]) {
            stage("Synth") {
                unstash "builtSources"
                sh 'make -C ./CI/scripts test_synth'
                junit testResults: 'test/*.xml', allowEmptyResults: true
                archiveArtifacts artifacts: 'test/logs/*', followSymlinks: false, allowEmptyArchive: true
            }
        }
    }
}
*/
/////////////////////////////////////////////////////


node("lab1") {
    stage("Synthesis Tests") {
        withEnv(['HDLBRANCH=hdl_2019_r2','LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
            try {
                stage('Install nebula'){
                    sh 'git clone -b tfcollins/ml-bootbin-dl https://github.com/sdgtt/nebula.git'
                    dir('nebula') {
                        // openssl workaround
                        sh 'apt remove python3-pip'
                        sh 'wget https://bootstrap.pypa.io/get-pip.py'
                        sh 'python3 get-pip.py'
                        sh 'pip3 install pyOpenSSL --upgrade'
                        sh 'pip3 install cryptography --upgrade'
                        sh 'pip3 install -r requirements.txt'
                        sh 'pip3 install pyopenssl --upgrade'
                        sh 'python3 setup.py install'
                    }
                    sh 'nebula --help'
                }
                stage("Synth") {
                    unstash "builtSources"
                    sh 'make -C ./CI/scripts test_synth'
                    junit testResults: 'test/*.xml', allowEmptyResults: true
                    archiveArtifacts artifacts: 'test/logs/*', followSymlinks: false, allowEmptyArchive: true
                    archiveArtifacts artifacts: 'test/*BOOT.BIN*', followSymlinks: false, allowEmptyArchive: true
                    sh 'find . | grep  ".BIN"'
                    uploadArtifactory('TransceiverToolbox','*.mltbx')
                }
                stage("Upload BOOT.BINs") {
                    sh 'mkdir bootbins'
                    sh 'mv test/*.BIN bootbins/'
                    sh 'nebula show-log dl.bootbin-map bootbins'
                    uploadArtifactory('TransceiverToolbox','bootbins/*.BIN*')
                    uploadArtifactory('TransceiverToolbox','mapping.txt')
                }
            }
            finally {
                cleanWs();
            }
        }
    }
}

